% =========================================================================
% GENERATE HTML DASHBOARD (FINAL - Re-Commented)
% Version: FINAL 1.0
%
% Description:
%   Creates an offline HTML summary dashboard file (`mission_summary.html`)
%   at the end of a simulation run. This dashboard provides a convenient
%   overview of the simulation results.
%
% Functionality (Patch 17):
%   - Generates the basic HTML5 structure for the dashboard page.
%   - Copies static assets (CSS, potentially JS) from the project's
%     `dashboard/` folder to the simulation run's `output/dashboard/` subfolder.
%   - Dynamically finds saved plot images (PNG format assumed) located in the
%     `output/figures/` subfolder generated during the simulation run.
%   - Creates HTML content including:
%       - Run identifier and generation timestamp.
%       - A summary of key configuration flags used for the run.
%       - A summary of simulation results (completion reason, steps, time, WPs reached).
%       - Calculated average link availability across valid RF links.
%       - Links to the full TSPI data file (CSV or MAT) and the raw log file (MAT).
%       - A gallery displaying thumbnails of the generated plot images, linked
%         to the full-size images.
%   - Saves the final HTML file to the main output folder for the simulation run.
%
% Usage:
%   Called once from `main_simulation.m` after all other processing and plotting
%   steps are complete, typically just before the simulation finishes.
%   `generate_html_dashboard(config, simulation_metadata, processed_rf_data);`
%
% Inputs:
%   config              - The main configuration structure (`config_settings.m`). Used for
%                         retrieving output paths and displaying key config values.
%   simulation_metadata - Metadata structure output by `aircraft_dynamics_model.m`. Used
%                         for simulation results summary (completion reason, steps, etc.).
%   processed_rf_data   - The structured RF data generated by `main_simulation.m`'s
%                         post-processing step. Used to calculate average link availability.
%
% Output:
%   - Creates/overwrites `mission_summary.html` in the main output folder.
%   - Copies contents of the project's `dashboard/` folder to `output/dashboard/`.
%
% Dependencies:
%   - Requires the static assets (e.g., `dashboard_style.css`) to exist in a
%     `dashboard/` folder at the project root level for proper copying and styling.
%   - Assumes plot images are saved as `.png` files in the `figures/` subfolder
%     of the simulation output directory by `snapshot_generator.m`.
%
% Maintainer: [Your Name/Team]
% Last Updated: [Date - e.g., 2025-04-04]
% =========================================================================
function generate_html_dashboard(config, simulation_metadata, processed_rf_data)

    fprintf('[DASHBOARD] Generating HTML Mission Summary Dashboard...\n');

    % --- Define Paths ---
    output_folder         = config.output.FOLDER;                       % e.g., output/sim_20250404_...
    figure_folder         = fullfile(output_folder, 'figures');         % Subfolder for plots
    dashboard_src_folder  = 'dashboard';                                % Source of CSS/JS assets (relative to project root)
    dashboard_dest_folder = fullfile(output_folder, 'dashboard');       % Destination for copied assets
    html_filename         = 'mission_summary.html';                     % Output HTML filename
    html_filepath         = fullfile(output_folder, html_filename);   % Full path to output HTML

    % --- Prerequisite Checks ---
    if ~isfolder(output_folder)
        warning('[DASHBOARD] Output folder "%s" does not exist. Cannot generate dashboard.', output_folder);
        return;
    end
    figure_folder_exists = isfolder(figure_folder);
    if ~figure_folder_exists
        warning('[DASHBOARD] Figures folder "%s" does not exist. Dashboard will lack plot images.', figure_folder);
    end
    if ~isfolder(dashboard_src_folder)
        warning('[DASHBOARD] Dashboard source asset folder ("%s") not found. Dashboard formatting may be broken.', dashboard_src_folder);
    end

    % --- Copy Dashboard Static Assets (CSS, JS, etc.) ---
    if isfolder(dashboard_src_folder)
        try
            % Remove destination folder first to ensure clean copy
            if isfolder(dashboard_dest_folder)
                try rmdir(dashboard_dest_folder, 's'); catch ME_rm, warning('Could not remove old dashboard assets: %s', ME_rm.message); end
            end
            % Copy assets
            copyfile(dashboard_src_folder, dashboard_dest_folder);
            fprintf('  Copied dashboard assets to: %s\n', dashboard_dest_folder);
        catch ME_copy
            warning('[DASHBOARD] Failed to copy dashboard assets from "%s" to "%s": %s', ...
                    dashboard_src_folder, dashboard_dest_folder, ME_copy.message);
        end
    end

    % --- Open HTML File for Writing ---
    fid = fopen(html_filepath, 'w'); % Open in write mode ('w'), creates/overwrites file
    if fid == -1
        error('Cannot open HTML file "%s" for writing. Check permissions.', html_filepath);
    end

    % --- Write HTML Content ---
    try % Use try-finally to ensure file is closed even if errors occur

        % --- HTML Header ---
        fprintf(fid, '<!DOCTYPE html>\n');
        fprintf(fid, '<html lang="en">\n');
        fprintf(fid, '<head>\n');
        fprintf(fid, '  <meta charset="UTF-8">\n');
        fprintf(fid, '  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n');
        fprintf(fid, '  <title>Mission Summary - %s</title>\n', output_folder); % Use run folder name in title
        % Link to the copied CSS file (relative path)
        fprintf(fid, '  <link rel="stylesheet" href="dashboard/dashboard_style.css">\n');
        fprintf(fid, '</head>\n');
        fprintf(fid, '<body>\n');
        fprintf(fid, '  <div class="container">\n'); % Main content container
        fprintf(fid, '    <h1>Mission Summary Dashboard</h1>\n');
        % Display run identifier and generation timestamp
        fprintf(fid, '    <p><strong>Run:</strong> %s | <strong>Generated:</strong> %s</p>\n', output_folder, datestr(now));
        fprintf(fid, '    <hr>\n');

        % --- Configuration Summary Section ---
        fprintf(fid, '    <section>\n');
        fprintf(fid, '      <h2>Configuration</h2>\n');
        fprintf(fid, '      <ul>\n');
        % Add key configuration parameters dynamically
        fprintf(fid, '        <li>Duration: %.1f s | Time Step: %.3f s</li>\n', config.simulation.duration_s, config.simulation.time_step_s);
        fprintf(fid, '        <li>Realtime Input: %s</li>\n', mat2str_html(config.simulation.ENABLE_REALTIME_INPUT));
        fprintf(fid, '        <li>RF Module: %s | Terrain LOS: %s | Aircraft Masking: %s (%s)</li>\n', ...
                mat2str_html(config.rf.ENABLE_RF_MODULE), ...
                mat2str_html(config.terrain.ENABLE_TERRAIN_LOS), ...
                mat2str_html(config.masking.ENABLE_AIRCRAFT_MASKING), ...
                config.masking.METHOD);
        fprintf(fid, '        <li>Atmosphere Model: %s</li>\n', config.environment.MODEL);
        % Add more key config flags as desired...
        fprintf(fid, '      </ul>\n');
        % Add link to the text config summary if it exists
        config_log_txt_rel = fullfile('logs', 'config_summary.txt'); % Relative path for link
        if isfile(fullfile(output_folder, config_log_txt_rel))
            fprintf(fid, '      <p><a href="%s" target="_blank">View Full Config Summary Text</a></p>\n', config_log_txt_rel);
        end
        fprintf(fid, '    </section>\n');
        fprintf(fid, '    <hr>\n');

        % --- Simulation Results Summary Section ---
        fprintf(fid, '    <section>\n');
        fprintf(fid, '      <h2>Results</h2>\n');
        % Display completion reason, step count, simulation time
        if isfield(simulation_metadata, 'completion_reason')
            fprintf(fid, '      <p><strong>Completion Reason:</strong> %s</p>\n', simulation_metadata.completion_reason);
        end
        if isfield(simulation_metadata, 'num_steps') && isfield(simulation_metadata, 'total_sim_time_s')
             fprintf(fid, '      <p><strong>Total Steps:</strong> %d | <strong>Simulated Time:</strong> %.2f s</p>\n', simulation_metadata.num_steps, simulation_metadata.total_sim_time_s);
        end
        if isfield(simulation_metadata, 'waypoints_reached') && ~isempty(config.flight.waypoints)
             fprintf(fid, '      <p><strong>Waypoints Reached:</strong> %d / %d</p>\n', simulation_metadata.waypoints_reached, size(config.flight.waypoints, 1));
        end
        % Calculate and display average RF link availability
        avg_availability = calculate_average_availability_helper(processed_rf_data); % Use helper
        if ~isnan(avg_availability)
             fprintf(fid, '      <p><strong>Average Link Availability:</strong> %.1f %%</p>\n', avg_availability);
        end
        % Add links to detailed data files (TSPI, Raw Logs)
        tspi_csv_rel = 'tspi_data.csv'; tspi_mat_rel = 'tspi_data.mat';
        if isfile(fullfile(output_folder, tspi_csv_rel)) % Prefer CSV link if exists
             fprintf(fid, '      <p><a href="%s" target="_blank">View Full TSPI Data (CSV)</a></p>\n', tspi_csv_rel);
        elseif isfile(fullfile(output_folder, tspi_mat_rel))
            fprintf(fid, '      <p>(Full TSPI data saved in %s)</p>\n', tspi_mat_rel);
        end
        raw_log_file_rel = fullfile('logs', ['raw_simulation_logs.' config.output.RAW_DATA_FORMAT]); % Relative path
        if isfile(fullfile(output_folder, raw_log_file_rel))
             fprintf(fid, '      <p><a href="%s" target="_blank">Download Raw Simulation Logs (.%s)</a></p>\n', raw_log_file_rel, config.output.RAW_DATA_FORMAT);
        end
        fprintf(fid, '    </section>\n');
        fprintf(fid, '    <hr>\n');

        % --- Plot Gallery Section ---
        fprintf(fid, '    <section>\n');
        fprintf(fid, '      <h2>Generated Plots</h2>\n');
        fprintf(fid, '      <div class="plot-gallery">\n'); % Container for plot items

        % Find saved plot images (assuming PNG format in figures/ subfolder)
        if figure_folder_exists
            plot_files = dir(fullfile(figure_folder, '*.png'));
        else
            plot_files = [];
        end

        if isempty(plot_files)
            fprintf(fid, '        <p>(No plot images found in "%s" folder)</p>\n', figure_folder);
        else
            % Sort files alphabetically for consistent order
            [~,idx_sort] = sort({plot_files.name});
            plot_files = plot_files(idx_sort);

            % Create an item for each plot image
            for i = 1:length(plot_files)
                plot_filename = plot_files(i).name;
                % Create relative path for use in HTML src/href attributes
                plot_filepath_relative = ['figures/', plot_filename];

                % Generate HTML for one plot item (thumbnail linked to full image)
                fprintf(fid, '        <div class="plot-item">\n');
                % Link opens image in new tab
                fprintf(fid, '          <a href="%s" target="_blank">\n', plot_filepath_relative);
                % Image tag uses relative path, alt text is filename
                fprintf(fid, '            <img src="%s" alt="%s" title="Click to enlarge">\n', plot_filepath_relative, plot_filename);
                fprintf(fid, '          </a>\n');
                % Add cleaned-up plot name as a caption below the image
                fprintf(fid, '          <p>%s</p>\n', clean_plot_name_helper(plot_filename));
                fprintf(fid, '        </div>\n');
            end % End loop through plot files
        end % End if plot_files empty check

        fprintf(fid, '      </div>\n'); % End plot-gallery div
        fprintf(fid, '    </section>\n');


        % --- HTML Footer ---
        fprintf(fid, '  </div>\n'); % End container div
        % Optional: Link to a JS file for interactivity if needed
        % fprintf(fid, '  <script src="dashboard/dashboard_script.js"></script>\n');
        fprintf(fid, '</body>\n');
        fprintf(fid, '</html>\n');

        % --- Close HTML File ---
        fclose(fid);
        fprintf('[DASHBOARD] HTML Dashboard saved successfully to: %s\n', html_filepath);

    catch ME_html % Catch errors during file writing
        warning('Failed to write HTML dashboard file: %s', ME_html.message);
        if fid ~= -1, try fclose(fid); catch; end; end % Ensure file is closed on error
    end

end % END OF FUNCTION generate_html_dashboard

% =========================================================================
% LOCAL HELPER FUNCTIONS for HTML Dashboard Generation
% =========================================================================

% --- Calculate Average RF Link Availability ---
function avg_avail = calculate_average_availability_helper(processed_rf_data)
    % Calculates average availability (% time OK) across all *valid* (non-skipped) RF links.
    avg_avail = NaN; % Default to NaN if no data or error
    total_ok_steps   = 0;
    total_valid_steps = 0; % Total steps across all valid links

    % Check if input structure is valid
    if isempty(processed_rf_data) || ~isstruct(processed_rf_data) || isempty(fieldnames(processed_rf_data))
        return;
    end

    try
        tx_ids = fieldnames(processed_rf_data);
        for i_tx = 1:length(tx_ids) % Loop through transmitters
             if ~isstruct(processed_rf_data.(tx_ids{i_tx})), continue; end % Skip if Tx field isn't a struct
             rx_ids = fieldnames(processed_rf_data.(tx_ids{i_tx}));
             for i_rx = 1:length(rx_ids) % Loop through receivers for this Tx
                 link_data = processed_rf_data.(tx_ids{i_tx}).(rx_ids{i_rx});
                 % Check if required 'status' field exists and is a cell array
                 if isfield(link_data, 'status') && iscell(link_data.status)
                     % Find steps that were actually calculated (not SKIP or initial PENDING)
                     valid_mask = ~strcmp(link_data.status, 'SKIP') & ~strcmp(link_data.status, 'PENDING');
                     num_valid_steps_this_link = sum(valid_mask);
                     if num_valid_steps_this_link > 0
                         % Count how many of the valid steps were 'OK'
                         ok_steps_this_link = sum(strcmp(link_data.status(valid_mask), 'OK'));
                         % Accumulate totals
                         total_ok_steps    = total_ok_steps + ok_steps_this_link;
                         total_valid_steps = total_valid_steps + num_valid_steps_this_link;
                     end
                 end % End if status field valid
             end % End Rx loop
        end % End Tx loop

        % Calculate average percentage if any valid steps were found
        if total_valid_steps > 0
            avg_avail = (total_ok_steps / total_valid_steps) * 100;
        end % Else remains NaN

    catch ME_avail % Catch any errors during calculation
         warning('[DASHBOARD Helper] Error calculating average availability: %s', ME_avail.message);
         avg_avail = NaN; % Return NaN on error
    end
end

% --- Clean Plot Filename for Display ---
function clean_name = clean_plot_name_helper(filename)
    % Helper to make plot filenames more readable for use as captions in HTML.
    % Removes extension, replaces underscores, removes common suffixes.
    try
        [~, name_no_ext, ~] = fileparts(filename);
        % Replace underscores and hyphens with spaces
        clean_name = strrep(name_no_ext, '_', ' ');
        clean_name = strrep(clean_name, '-', ' ');
        % Remove common suffixes like sequence numbers or timestamps
        clean_name = regexprep(clean_name, ' \d+$', ''); % Remove trailing numbers
        clean_name = regexprep(clean_name, ' T[\d.]+s*$', ''); % Remove ' T123.4s' suffix
        clean_name = regexprep(clean_name, ' \d{8} \d{6}\d*$', ''); % Remove ' YYYYMMDD HHMMSSFFF' suffix
        clean_name = strtrim(clean_name); % Trim leading/trailing whitespace
        % Optional: Capitalize first letter of each word?
        % clean_name = lower(clean_name); clean_name(1) = upper(clean_name(1)); % Capitalize first letter
    catch
        clean_name = filename; % Return original filename on error
    end
end

% --- Convert MATLAB Logical to HTML String ---
function html_str = mat2str_html(matlab_logical)
    % Converts true/false to 'Yes'/'No' or 'True'/'False' for HTML display
    if islogical(matlab_logical) && isscalar(matlab_logical)
        if matlab_logical
            html_str = 'True';
        else
            html_str = 'False';
        end
    elseif isnumeric(matlab_logical) && isscalar(matlab_logical) % Handle numeric 0/1
         if matlab_logical == 1
              html_str = 'True';
         else
              html_str = 'False';
         end
    else
        html_str = mat2str(matlab_logical); % Fallback for other types
    end
end